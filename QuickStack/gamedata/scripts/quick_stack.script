-- Get key configurations from MCM
local function get_config(key)
    if ui_mcm then return ui_mcm.get("quick_stack/" .. key) end
    return nil
end

local function get_key_v()
    return get_config("key_quick_stack_v") or DIK_keys.DIK_V
end

local function get_key_b()
    return get_config("key_quick_stack_b") or DIK_keys.DIK_B
end

local gui
local first_start = true

-- Safe check for using pairs
local function safe_pairs(table_var)
    if type(table_var) ~= "table" then
        print("Error: Expected a table, but got " .. type(table_var))
        return
    end
    return pairs(table_var)
end

-- Define Quick Stack Actions
local function add_quick_stack_actions()
    gui.Action_Quick_Stack_V = function()
        local npc = gui:GetPartner()
        if not npc then return end
        local cc = gui.CC["actor_bag"]
        if not cc or type(cc.indx_id) ~= "table" then
            print("Error: 'actor_bag' is invalid.")
            return
        end
        for id, _ in safe_pairs(cc.indx_id) do
            local obj = level.object_by_id(id)
            if obj and gui:Cond_Move(obj, "actor_bag") and gui.CC["npc_bag"]:FindSimilar(obj, obj:section()) then
                gui:Action_Move(obj, "actor_bag")
            end
        end
        gui.update_info = true
    end

    gui.Action_Quick_Stack_B = function()
        local npc = gui:GetPartner()
        if not npc then return end
        local cc = gui.CC["npc_bag"]
        if not cc or type(cc.indx_id) ~= "table" then
            print("Error: 'npc_bag' is invalid.")
            return
        end
        for id, _ in safe_pairs(cc.indx_id) do
            local obj = level.object_by_id(id)
            if obj and gui:Cond_Move(obj, "npc_bag") and gui.CC["actor_bag"]:FindSimilar(obj, obj:section()) then
                gui:Action_Move(obj, "npc_bag")
            end
        end
        gui.update_info = true
    end
end

-- Initialize Quick Stack
local function doStorageStack()
    if first_start then
        add_quick_stack_actions()
        first_start = false
    end
end

-- Handle UI Open/Close
local function ui_close()
    gui = nil
end

local function ui_open()
    if ui_inventory.GUI and ui_inventory.GUI.mode == "loot" then
        gui = ui_inventory.GUI
        doStorageStack()
    else
        gui = nil
    end
end

-- Save the existing handlers to preserve compatibility
local original_on_key_press = bind_stalker_ext.on_key_press
local original_on_key_release = bind_stalker_ext.on_key_release

-- Define Quick Stack's key handling logic
local function quick_stack_on_key_press(_, key)
    if gui then
        if key == get_key_v() and gui.Action_Quick_Stack_V then
            gui.Action_Quick_Stack_V()
        elseif key == get_key_b() and gui.Action_Quick_Stack_B then
            gui.Action_Quick_Stack_B()
        end
    end

    -- Call the original handler to ensure compatibility
    if original_on_key_press then
        original_on_key_press(_, key)
    end
end

local function quick_stack_on_key_release(_, key)
    -- Call the original handler to ensure compatibility
    if original_on_key_release then
        original_on_key_release(_, key)
    end
end

-- Set up new handlers while preserving existing ones
bind_stalker_ext.on_key_press = quick_stack_on_key_press
bind_stalker_ext.on_key_release = quick_stack_on_key_release

-- Game Initialization
local function on_game_start()
    RegisterScriptCallback("GUI_on_hide", ui_close)
    RegisterScriptCallback("GUI_on_show", ui_open)
end

on_game_start()
